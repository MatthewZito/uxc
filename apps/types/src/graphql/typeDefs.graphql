scalar Date

type PrivateThread {
  _id: ID
	createdAt: Date
	updatedAt: Date
	users: [User]
}

type CommunityThread {
  _id: ID
	createdAt: Date
	updatedAt: Date
	users: [User]
}

type Message {
  _id: ID
	threadId: ID
	sender: User
	createdAt: Date
	updatedAt: Date
	body: String
}

type User {
	_id: ID
	username: String
	email: String
	userImage: String
}

input LoginInput {
	email: String
	password: String
}

input JoinInput {
	email: String
	username: String
	password: String
	userImage: String
}

type Query {
	getThread(threadId: ID): PrivateThread
	getThreads(userId: ID): [PrivateThread]
  getMessages(threadId: ID): [Message]
  getCurrentUser: User
  getUser(userId: ID): User
}

type Subscription {
  onMessage(threadId: ID): [Message]
	onThread: [PrivateThread]
}

type Mutation {
	seed: User
  createMessage(threadId: ID, body: String): Message
  updateMessage(messageId: ID, body: String): ID
	createThread(receiverId: ID): PrivateThread
	deleteThread(threadId: ID): ID
  login(args: LoginInput): User
	logout: ID
  join(args: JoinInput): User
}
