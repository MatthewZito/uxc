scalar Date

type Message {
  _id: ID
	roomId: ID
	sender: ID
	createdAt: Date
	updatedAt: Date
	body: String
}

type User {
	_id: ID
	username: String
	email: String
	userImage: String
	currentRoomId: ID
}

input LoginInput {
	email: String
	password: String
	rememberMe: Boolean
}

input JoinInput {
	email: String
	username: String
	password: String
	currentRoomId: ID
	userImage: ID
}

type Query {
  getAllMessages: [Message]
  getMessage(id: ID!): Message
  getUser: User
}

type Subscription {
  messages: [Message]
}

type Mutation {
  addMessage(roomId: ID, body: String): ID
  updateMessage(id: ID, body: String): ID
  login(args: LoginInput): User
	logout: ID
  join(args: JoinInput): User
}
