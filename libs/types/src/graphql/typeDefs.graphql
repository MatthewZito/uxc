scalar Date

type DirectRoom {
  _id: ID
	createdAt: Date
	updatedAt: Date
	users: [User]
}

type Message {
  _id: ID
	roomId: ID
	sender: User
	createdAt: Date
	updatedAt: Date
	body: String
}

type User {
	_id: ID
	username: String
	email: String
	userImage: String
	currentRoomId: ID
}

input LoginInput {
	email: String
	password: String
	rememberMe: Boolean
}

input JoinInput {
	email: String
	username: String
	password: String
	currentRoomId: ID
	userImage: ID
}

type Query {
	getDirects(userId: ID): [DirectRoom]
  getMessages(roomId: ID): [Message]
  getUser: User
}

type Subscription {
  messages(roomId: ID): [Message]
}

type Mutation {
	seed: User
  addMessage(roomId: ID, body: String): ID
  updateMessage(id: ID, body: String): ID
  login(args: LoginInput): User
	logout: ID
  join(args: JoinInput): User
}
